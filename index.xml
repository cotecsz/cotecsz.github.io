<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Even - A super concise theme for Hugo</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Even - A super concise theme for Hugo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 10 Jul 2018 00:00:00 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Theme preview</title>
      <link>http://localhost:1313/post/even-preview/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/even-preview/</guid>
      <description>Based on MarkdownPreview test.md. Markdown 1 2 3 4 5 6 7 8 # H1 ## H2 ### H3 #### H4 ##### H5 ###### H6 ### Duplicate Header ### Duplicate Header H1 H2 H3 H4 H5 H6 Duplicate Header Duplicate Header Paragraphs 1 2 3 4 This is a paragraph. I am still part of the paragraph. New paragraph. This is a paragraph. I am still part of the paragraph.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>http://localhost:1313/about/</guid>
      <description>Hugo is a static site engine written in Go.
It makes use of a variety of open source projects including:
 Cobra Viper J Walter Weatherman Cast  Learn more and contribute on GitHub.</description>
    </item>
    
    <item>
      <title>This is a hidden post.</title>
      <link>http://localhost:1313/post/hidden-post/</link>
      <pubDate>Thu, 08 Mar 2018 17:40:19 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hidden-post/</guid>
      <description>&lt;p&gt;This post is hidden from the home page.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>[English] Creating a New Theme</title>
      <link>http://localhost:1313/post/english-preview/</link>
      <pubDate>Thu, 31 Aug 2017 15:43:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/english-preview/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&#39;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&#39;t cover using CSS to style your theme.
We&#39;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>[日本語] 敬語体系</title>
      <link>http://localhost:1313/post/japanese-preview/</link>
      <pubDate>Wed, 30 Aug 2017 01:53:34 +0800</pubDate>
      
      <guid>http://localhost:1313/post/japanese-preview/</guid>
      <description>日本語の敬語体系は、一般に、大きく尊敬語・謙譲語・丁寧語に分類される。文化審議会国語分科会は、2007年2月に「敬語の指針」を答申し、これに</description>
    </item>
    
    <item>
      <title>[中文] 《长恨歌》</title>
      <link>http://localhost:1313/post/chinese-preview/</link>
      <pubDate>Wed, 30 Aug 2017 01:37:56 +0800</pubDate>
      
      <guid>http://localhost:1313/post/chinese-preview/</guid>
      <description>《长恨歌》是中国唐朝诗人白居易的一首长篇叙事诗。 第一段：贵妃受宠爱 汉皇重色思倾国，御宇多年求不得。杨家有女初长成，养在深闺人未识。 天生丽质难</description>
    </item>
    
    <item>
      <title>Shortcodes</title>
      <link>http://localhost:1313/post/shortcodes/</link>
      <pubDate>Tue, 30 Aug 2016 16:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/shortcodes/</guid>
      <description>&lt;h1 id=&#34;admonition&#34;&gt;Admonition&lt;/h1&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;biu biu biu.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;{{% admonition note &amp;#34;I&amp;#39;m title!&amp;#34; false %}}
biu biu biu.

{{% admonition type=&amp;#34;note&amp;#34; title=&amp;#34;note&amp;#34; details=&amp;#34;true&amp;#34; %}}
biu biu biu.
{{% /admonition %}}

{{% admonition example %}}
Without title.
{{% /admonition %}}

{{% /admonition %}}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JS Flowchart Diagrams</title>
      <link>http://localhost:1313/post/js-flowchart-diagrams/</link>
      <pubDate>Wed, 04 Mar 2015 21:57:50 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js-flowchart-diagrams/</guid>
      <description>&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;st=&amp;gt;start: Start|past:&amp;gt;http://www.google.com[blank]
e=&amp;gt;end: End:&amp;gt;http://www.google.com
op1=&amp;gt;operation: My Operation|past
op2=&amp;gt;operation: Stuff|current
sub1=&amp;gt;subroutine: My Subroutine|invalid
cond=&amp;gt;condition: Yes
or No?|approved:&amp;gt;http://www.google.com
c2=&amp;gt;condition: Good idea|rejected
io=&amp;gt;inputoutput: catch something...|request

st-&amp;gt;op1(right)-&amp;gt;cond
cond(yes, right)-&amp;gt;c2
cond(no)-&amp;gt;sub1(left)-&amp;gt;op1
c2(yes)-&amp;gt;io-&amp;gt;e
c2(no)-&amp;gt;op2-&amp;gt;e
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>JS Sequence Diagrams</title>
      <link>http://localhost:1313/post/js-sequence-diagrams/</link>
      <pubDate>Wed, 04 Mar 2015 21:57:45 +0800</pubDate>
      
      <guid>http://localhost:1313/post/js-sequence-diagrams/</guid>
      <description>&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;Andrew-&amp;gt;China: Says Hello
Note right of China: China thinks\nabout it
China--&amp;gt;Andrew: How are you?
Andrew-&amp;gt;&amp;gt;China: I am good thanks!
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Syntax Highlighting</title>
      <link>http://localhost:1313/post/syntax-highlighting/</link>
      <pubDate>Tue, 30 Aug 2011 16:01:23 +0800</pubDate>
      
      <guid>http://localhost:1313/post/syntax-highlighting/</guid>
      <description>&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helloWorld&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, World!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/c&#43;&#43;-%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%B8%80%E5%8F%98%E9%87%8F%E5%8F%8A%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/c&#43;&#43;-%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%B8%80%E5%8F%98%E9%87%8F%E5%8F%8A%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</guid>
      <description>C++ 学习札记（一）变量及基本类型 [TOC]
1 基本类型 1.1 算术类型 1.1.1 整型和浮点型  算术类型分为整型和浮点型，其中，整型包括字符串，布尔类型。下面是C++基本内置类型及其尺寸：
   类型 含义 最小尺寸     int 整型 16位   long 长整型 32位   long long 长整型 64位   short 短整型 16位   bool 布尔类型 未定义   char 字符 8位   wchar_t 宽字符 16位   char16_t Unicode 字符 16位   char32_t Unicode 字符 32位   float 单精度浮点数 6位有效数字   double 双精度浮点数 10位有效数字   long double 扩展双精度浮点数 10位有效数字     带符号类型与无符号类型：</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/c&#43;&#43;-%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%BA%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/c&#43;&#43;-%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%BA%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</guid>
      <description>C++ 学习札记（二）字符串、向量和数组 [TOC]
本章主要介绍两种重要的类型，字符串和向量。字符串是变长字符的序列，向量是可变长度的给定类型集合。
1 Namespace 1.1 using 声明命名空间  对命名空间的每个成员进行单独声明，如下
1 2 3 4 5 6 7 8 9  #include &amp;lt;iostream&amp;gt;using namespace std::cin; using namespace std::cout; using namespace std::endl; int main(){ cout &amp;lt;&amp;lt; &amp;#34;A Separate using Declaration Is Required for Each Name&amp;#34; &amp;lt;&amp;lt; endl; return 0; }   1.2 头文件中不能使用 using  在头文件中通常不能使用using 声明。因为头文件中的代码在编译过程中被拷贝至包含该头文件的源文件中，使得命名空间中的名字与源文件的命名可能发生冲突。
2 String 2.1 定义和初始化字符串  字符串是变长字符序列，包含头文件如下，初始化方式如下四种
1 2 3 4 5 6 7 8 9 10 11  #include &amp;lt;string&amp;gt;using std::string; // 空字符串 string s1; // s1 字符串的拷贝 string s2 = s1; // 字符拷贝 string s3 = &amp;#34;character&amp;#34;; // 直接初始化 string s4(10, &amp;#39;b&amp;#39;)   直接初始化与拷贝初始化 拷贝初始化：当使用 = 对变量初始化时，编译器则会拷贝等号右边的变量对创建的目标变量进行初始化</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/c&#43;&#43;-%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%9B%9B%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/c&#43;&#43;-%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%9B%9B%E5%87%BD%E6%95%B0/</guid>
      <description>C++ 学习札记（四）函数 [TOC]
 本章学习函数相关内容，主要包括：
 函数定义及声明，包括参数传递和返回值 重载函数 函数匹配 函数指针 &amp;hellip;  1 函数基础  函数定义由返回值类型，函数名，函数参数和一个函数体组成。
1.1 局部对象  在 C++ 中，名字有范围，对象有生命周期。理解下面两个概念是重要的：
 名称范围是在程序代码中变量名可视的部分 生命周期是对象从程序执行到对象退出  参数和定义在函数中的变量被称为局部变量。
1.1.1 自动变量  与局部变量对应的对象在执行函数中的变量定义时被创建，变量定义的块执行结束后退出。在块执行结束后退出的对象称为 自动变量 。参数即自动变量。
1.1.2 局部 static 对象  定义为 static 的局部变量的生命周期周期贯穿函数的调用期间，在第一次执行变量定义时被初始化，在程序结束后被销毁。
1 2 3 4 5 6 7 8 9 10  size_t count_calls(){ static size_t ctr = 0; return ++ctr; } int main(){ for (int i=0; i != 10; ++i) cout &amp;lt;&amp;lt; count_calls() &amp;lt;&amp;lt; endl; return 0; }    如果一个局部变量未被明确地初始化，则被初始值初始化，内置类型被初始化为0。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%B8%89%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%B8%89%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>C++学习札记（三）表达式 [TOC]
 C++ 中定义了很多操作符，应用在内置类型的操作元，也可以在自定义的类中定义操作符。本章介绍标准库中的操作符。
1 Fundamentals 1.1 基本概念 左值和右值 右值：当使用一个对象作为右值，使用对象的值（它的内容）
左值：当使用一个对象作为左值，使用对象的标识（它在内存中的地址）
重要的是，当需要右值时，可以使用左值来代替（左值可以表示右值）；但不能在需要左值时，使用右值代替（右值不能表示左值）。
 注意：在写组合表达式时，遵循两个规则：
 尽可能使用括号消除歧义 在表达式中改变操作数的值，则在同一个表达式中不要使用该操作数   2 Arthmetic Operators 取余与除法运算
 取余运算   m % -n = m % n -m % n = - (m % n)  除法运算   m / -n = -m / n  3 Increment and Decrement Operators 自增，自减运算符
 ++pbeg：pbeg + 1，返回 pbeg+1 的值的副本 pbeg++：peg + 1，返回pbeg 之前的值  1 2 3  int i=0, j; j = ++i;	// j=1, i=1 j = i++;	// j=1, i=2   解引用和自增  1 2 3  auto pbeg = v.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%B9%9D%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%B9%9D%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</guid>
      <description>C++学习札记（九）泛型算法 [TOC]
1 概述  大多数算法在头文件 algorithm 中，numeric定义了一组数值通用算法 泛型算法通过遍历给定的迭代器范围来进行操作  查找 算法
 在 vector 中查找  1 2 3 4 5  int val = 42; auto result = find(vec.cbegin(), vec.cend(), val); cout &amp;lt;&amp;lt; &amp;#34;The value:&amp;#34; &amp;lt;&amp;lt; val &amp;lt;&amp;lt; (result == c.cend() ? &amp;#34;Not present&amp;#34; : &amp;#34;is Present&amp;#34;) &amp;lt;&amp;lt; endl;   在 list 中查找  1 2  string val = &amp;#34;a value&amp;#34;; auto result = find(lst.cbegin(), lst.cend(), val);   在内置数组中查找  1 2 3  int ia[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; int val = 3; int* result = find(begin(ia), end(ia), val);    迭代器令算法不依赖于容器，但算法依赖于元素类型。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%BA%94%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E4%BA%94%E7%B1%BB/</guid>
      <description>C++学习札记（五）类 [TOC]
 在 C++ 中，可以通过类来定义数据类型。本章阐述数据抽象的重要性，将对象的操作分别实现。基本概念是类是数据抽象和封装。数据抽象是将接口与实现分离的编程技术，接口是用户对类可以执行的操作，实现包含类成员，接口的函数实现和其他类使用而非用户使用的函数。
 封装确保类的接口与实现的分离。类的封装隐藏了其实现，用户可以访问接口但无法查看实现。使用数据抽象与封装定义抽象数据类型。类的设计者关注其如何实现，使用者关注其如何使用。
1 定义抽象类型  Sale_data 接口有以下操作：
 isbn() ：返回对象的 ISBN combine()：将 Sale_data 对象加到另一个对象上 add()：两个 Sale_data 相加 read()：从一个 istream 读取一个 Sale_data 对象 print()：将一个 Sale_data 输出到 ostream  1.1 Sales_data 类 定义 Sales_data 结构体：
1 2 3 4 5 6 7 8 9 10 11 12 13  struct Sales_data{ std::string isbn() const {return bookNo;} Sales_data&amp;amp; combine(const Sales_data&amp;amp;); double avg_price() const; std::string bookNo; unsigned unit_sold = 0; double revenue = 0.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%85%AB%E5%BA%8F%E5%88%97%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%85%AB%E5%BA%8F%E5%88%97%E5%AE%B9%E5%99%A8/</guid>
      <description>C++学习札记（八）序列容器 [TOC]
1 序列容器概览 下表给出所有顺序容器，顺序容器提供了快速顺序访问元素的能力
   Type Use     vector 可变大小的array ,支持随机访问。除了尾部，在其他地方插入删除很慢。   deque 双端队列，支持快速随机访问。在头尾快速插入和删除。   list 双向链表，仅支持双向顺序访问。在链表中任何位置插入/删除很快   forward_list 单向链表，仅支持单向顺序访问。在链表中任何位置插入删除很快。   array 固定大小的array，支持快速随机访问。不能添加/删除元素。   string 与 vector 相似的含有字符序列容器。快速随机访问，在尾部插入和删除很快。    确定使用哪种顺序容器  通常，使用 vector 是最好的选择，除非有更好的理由选择其他容器。
 选择容器的基本原则：
 除非有更好的理由选择其他容器，否则选择 vector 程序含有 小的元素且空间的额外开销 很重要，不要使用 list 和 forward_list 程序需要在容器 中间 插入/删除元素，应使用 list 和 forward_list 程序需要在 头尾 插入/删除元素，但不会在中间插入/删除，应使用 deque 如果程序在读取输入时才需要在容器 中间插入 元素，随后需要随机访问元素：  确定是否真的需要在容器中间添加元素。在 vector 中追加数据，再用 sort() 重排数据，避免在中间位置添加元素。 如果必须在中间插入元素，考虑在输入阶段使用 list ，输入完成将 list 中的内容拷贝到 vector 中。    2 容器标准库概览  一般来说，每个容器都定义在一个头文件中，deque 定义在头文件 deque 中，list 定义在头文件 list 中。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%85%ADthe-io-library/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%85%ADthe-io-library/</guid>
      <description>C++学习札记（六）The IO Library [TOC]
本章将介绍一下操作：
 istream 类型：输入类型，提供输入操作 ostream 类型：输出类型，提供输出操作 cin ：一个 istream 对象，标准输入 cout ：一个 ostream 对象，标准输出 cerr ：一个 ostream 对象，用于输出程序错误信息 &amp;gt;&amp;gt; ：从 istream 读取输入 &amp;lt;&amp;lt; ：将输出写至 ostream  1 IO 类  IO 类型头文件及类型
   头文件 类型     iostream istream, wistream 从流中读写数据ostream, wostream 向流写入数据iostream, wiostream 读写流   fstream ifstream, ofstream 从文件读取数据ofstream, wofstream 向文件写入数据fstream, wfstream 读写文件   sstream istringstream, wistringstream 从 string 读取数据ostringstream, wostringstrem 向 string 写入数据stringstream, wstringstream 读写string     由于类型 ifstream 和 istringstream 与 istream 之间的继承关系，可以与使用 istream 对象来使用它们。</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%8D%81%E4%B8%89%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%8D%81%E4%B8%89%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6/</guid>
      <description>C++学习札记（十三）拷贝控制 [TOC]
 在定义一个类时，会显式/隐式的定义在此类型的对象的拷贝、移动、赋值和销毁操作。类通过五个特殊的成员函数定义：
 拷贝构造函数 拷贝赋值函数 移动构造函数 移动赋值函数 析构函数  1 拷贝 赋值与销毁 1.1 拷贝构造函数  拷贝构造函数的第一个参数是自身类型的引用，且任何额外参数都有默认值，则此构造函数是拷贝构造函数
1 2 3 4 5  class Foo{ public: Foo();	// 默认构造函数  Foo(const Foo&amp;amp;);	// 拷贝构造函数 };   1.1.1 合成拷贝构造函数  在类中没有定义 合成拷贝构造函数 ，编译器会为我们定义一个，对于某些类，合成拷贝构造函数 用来阻止拷贝该类型的对象，在一般情况，会将参数的成员（非 static 对象）逐个拷贝到正在创建的对象中。
1 2 3 4 5 6 7 8 9 10  class Sales_data{ public: Sales_data(const Sales_data&amp;amp;); }; Sales_data::Sales_data(const Sales_data &amp;amp;orig): bookNo(orig.bookNo),	// 使用 string 的拷贝构造函数  units_sold(orign.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%8D%81%E4%BA%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%8D%81%E4%BA%8C%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</guid>
      <description>C++学习札记（十二）动态内存 [TOC]
 在之前编写的程序中，对象有严格定义的生存周期：
 全局对象在程序启动时分配，在程序结束时销毁 局部自动对象，在定义所在的程序块时被创建，在离开块时被销毁 局部静态对象，在第一次使用前被创建，在程序结束时被销毁  也仅仅使用过静态内存和栈内存：
 静态内存：局部 static 对象，类static 数据成员，定义在函数外的变量 栈内存：定义在函数内的非 static 对象   除静态内存和栈内存，每个程序还拥有一个内存池存储动态分配的对象，称为自由空间 / 堆 。
1 动态内存与智能指针  C++ 中动态内存通过一对运算符来完成：new 在动态内存中分配空间并返回指向该对象的指针，delete 接受一个动态对象指针，销毁该对象，释放与之关联的内存。 两种智能指针：  shared_ptr ：允许多个指针指向同一个对象 unique_ptr ：&amp;ldquo;独占&amp;quot;所指向的对象   标准库还定义了 weak_ptr 伴随类，是一种弱引用，指向 shared_ptr 所指向的对象  1.1 shared_ptr 类  智能指针也是模版，与vector 一样定义  1 2  shared_ptr&amp;lt;string&amp;gt; p1; shared_ptr&amp;lt;list&amp;lt;int&amp;gt;&amp;gt; p2;   与普通指针一样，解引用返回其指向的对象  1 2  if (p1 &amp;amp; p1-&amp;gt;empty()) *p1 = &amp;#34;hi&amp;#34;;   shared_ptr 和 unique_ptr 都支持的操作：定义，判断，解引用，获取成员，获取对象，交换</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%8D%81%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/post/c&#43;&#43;%E5%AD%A6%E4%B9%A0%E6%9C%AD%E8%AE%B0%E5%8D%81%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</guid>
      <description>C++学习札记（十）关联容器 [TOC]
 关联容器支持高效的访问和查找操作，两个主要的关联容器为 map 和 set 。标准库提供 8 个关联容器，体现在三个不同维度：
 map / set 要求不重复关键字，或允许重复关键字 multi 顺序保存，或无序保存 unordered     Container Type User     map 关联数组，保存键值对   set 关键字即值，即保存关键字的容器   multimap 关键字可重复出现的 map   multiset 关键字可重复出现的 set   unordered_map 用哈希函数组织的 map   unordered_set 用哈希函数组织的 set   unordered_multimap 哈希组织的 map ；关键字可重复出现   unordered_multiset 哈希组织的 set ；关系字可重复出现    1 使用关联容器  单词计数程序  1 2 3 4 5 6 7 8 9  map&amp;lt;string, size_t&amp;gt; word_count; string word; while (cin &amp;gt;&amp;gt; word) ++word_count[word]; for (const auto &amp;amp;w : word_count) cout &amp;lt;&amp;lt; w.</description>
    </item>
    
  </channel>
</rss>